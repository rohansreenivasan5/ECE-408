#include <cmath>
#include <iostream>
#include "gpu-new-forward.h"
#include "cuda_fp16.h"
#include <stdio.h>
#define TILE_WIDTH 16

__constant__ __half const_mask_fp[12 * 12 * 12 * 12];

__global__ void convert(const float *input, const int input_size, __half *fixed_input)
{
    // convert float values to __half
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < input_size)
    {
        fixed_input[i] = __float2half(input[i]);
    }
}
__global__ void conv_forward_kernel_fp(float *output, __half *input, const int B, const int M, const int C, const int H, const int W, const int K, const int S)
{
    /*

    Function paramter definitions:
    output - output
    input - input
    mask - convolution kernel
    B - batch_size (number of images in x)
    M - number of output feature maps
    C - number of input feature maps
    H - input height dimension
    W - input width dimension
    K - kernel height and width (K x K)
    S - stride step length
    */

    const int H_out = (H - K) / S + 1;
    const int W_out = (W - K) / S + 1;

    // We have some nice #defs for you below to simplify indexing. Feel free to use them, or create your own.
    // An example use of these macros:
    // float a = in_4d(0,0,0,0)
    // out_4d(0,0,0,0) = a

#define out_4d(i3, i2, i1, i0) output[(i3) * (M * H_out * W_out) + (i2) * (H_out * W_out) + (i1) * (W_out) + i0]
#define in_4d(i3, i2, i1, i0) input[(i3) * (C * H * W) + (i2) * (H * W) + (i1) * (W) + i0]
#define mask_4d(i3, i2, i1, i0) const_mask_fp[(i3) * (C * K * K) + (i2) * (K * K) + (i1) * (K) + i0]

    // Insert your GPU convolution kernel code here
    int W_grid = ceil(1.0 * W_out / TILE_WIDTH);

    int b = blockIdx.x;
    int m = blockIdx.y;
    int h = (blockIdx.z / W_grid) * TILE_WIDTH + threadIdx.y;
    int w = (blockIdx.z % W_grid) * TILE_WIDTH + threadIdx.x;

    if (m < M && b < B && h < H_out && w < W_out)
    {
        __half acc = 0.0;
        for (int c = 0; c < C; c++)
        {
            for (int p = 0; p < K; p++)
            {
                for (int q = 0; q < K; q++)
                {
                    acc = __hfma(in_4d(b, c, h * S + p, w * S + q), mask_4d(m, c, p, q), acc);
                }
            }
        }
        out_4d(b, m, h, w) = __half2float(acc);
    }

#undef out_4d
#undef in_4d
#undef mask_4d
}
__host__ void GPUInterface::conv_forward_gpu_prolog(const float *host_output, const float *host_input, const float *host_mask, float **device_output_ptr, float **device_input_ptr, float **device_mask_ptr, const int B, const int M, const int C, const int H, const int W, const int K, const int S)
{
    // Allocate memory and copy over the relevant data structures to the GPU

    // We pass double pointers for you to initialize the relevant device pointers,
    //  which are passed to the other two functions.

    // Useful snippet for error checking
    // cudaError_t error = cudaGetLastError();
    // if(error != cudaSuccess)
    // {
    //     std::cout<<"CUDA error: "<<cudaGetErrorString(error)<<std::endl;
    //     exit(-1);
    // }
    const int H_out = (H - K) / S + 1;
    const int W_out = (W - K) / S + 1;
    cudaMalloc(device_input_ptr, B * C * H * W * sizeof(float));
    cudaMalloc(device_output_ptr, B * M * H_out * W_out * sizeof(float));

    cudaMemcpy(*device_input_ptr, host_input, B * C * H * W * sizeof(float), cudaMemcpyHostToDevice);
    __half *host_mask_fp16 = (__half *)malloc(M * C * K * K * sizeof(__half));

    for (int i = 0; i < M * C * K * K; i++)
    {
        host_mask_fp16[i] = __float2half(host_mask[i]);
    }
    cudaMemcpyToSymbol(const_mask_fp, host_mask_fp16, K * K * M * C * sizeof(__half));

    free(host_mask_fp16);
}

__host__ void GPUInterface::conv_forward_gpu(float *device_output, const float *device_input, const float *device_mask, const int B, const int M, const int C, const int H, const int W, const int K, const int S)
{
    // Set the kernel dimensions and call the kernel
    const int H_out = (H - K) / S + 1;
    const int W_out = (W - K) / S + 1;
    const int W_grid = ceil(1.0 * W_out / TILE_WIDTH); // number of horizontal tiles per output map
    const int H_grid = ceil(1.0 * H_out / TILE_WIDTH); // number of vertical tiles per output map
    int Z = H_grid * W_grid;
    dim3 dimGrid(B, M, Z);
    dim3 dimBlock(TILE_WIDTH, TILE_WIDTH, 1);

    // Fixed Point
    __half *input_fp16;
    cudaMalloc((void **)&input_fp16, B * C * H * W * sizeof(__half));
    int input_size = B * C * H * W;
    convert<<<(input_size / 1024), 1024>>>(device_input, input_size, input_fp16);

    conv_forward_kernel_fp<<<dimGrid, dimBlock>>>(device_output, input_fp16, B, M, C, H, W, K, S);

    cudaFree(input_fp16);
}

__host__ void GPUInterface::conv_forward_gpu_epilog(float *host_output, float *device_output, float *device_input, float *device_mask, const int B, const int M, const int C, const int H, const int W, const int K, const int S)
{
    // Copy the output back to host

    // Free device memory
    const int Height_out = (H - K) / S + 1;
    const int Width_out = (W - K) / S + 1;
    int output_size = B * M * Height_out * Width_out;

    cudaMemcpy(host_output, device_output, output_size * sizeof(float), cudaMemcpyDeviceToHost);
    cudaFree(device_output);
    cudaFree(device_input);
    cudaFree(device_mask);
}

__host__ void GPUInterface::get_device_properties()
{
    int deviceCount;
    cudaGetDeviceCount(&deviceCount);

    for (int dev = 0; dev < deviceCount; dev++)
    {
        cudaDeviceProp deviceProp;
        cudaGetDeviceProperties(&deviceProp, dev);

        std::cout << "Device " << dev << " name: " << deviceProp.name << std::endl;
        std::cout << "Computational capabilities: " << deviceProp.major << "." << deviceProp.minor << std::endl;
        std::cout << "Max Global memory size: " << deviceProp.totalGlobalMem << std::endl;
        std::cout << "Max Constant memory size: " << deviceProp.totalConstMem << std::endl;
        std::cout << "Max Shared memory size per block: " << deviceProp.sharedMemPerBlock << std::endl;
        std::cout << "Max threads per block: " << deviceProp.maxThreadsPerBlock << std::endl;
        std::cout << "Max block dimensions: " << deviceProp.maxThreadsDim[0] << " x, " << deviceProp.maxThreadsDim[1] << " y, " << deviceProp.maxThreadsDim[2] << " z" << std::endl;
        std::cout << "Max grid dimensions: " << deviceProp.maxGridSize[0] << " x, " << deviceProp.maxGridSize[1] << " y, " << deviceProp.maxGridSize[2] << " z" << std::endl;
        std::cout << "Warp Size: " << deviceProp.warpSize << std::endl;
    }
}